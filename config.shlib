config_read_file() # Internal use only: Fetch configuration helper
{
    (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=__UNDEFINED__") | head -n 1 | cut -d '=' -f 2-;
}
interactive_check() # Internal use only: Interactive mode check 
{
    INTERACTIVE=$INTERACTIVE
    if [[ $INTERACTIVE == "1" ]]
    then
        echo -e "$CL_RED[IM]""$CL_RESET Press Enter to continue or CTRL + C to cancel. "
        read -p "   "
    fi
}

function config_get() # Gets a variable from the config.cfg or config.cfg.defaults in case var does not exist
{
    val="$(config_read_file config.cfg "${1}")";
    if [ "${val}" = "__UNDEFINED__" ]; then
        val="$(config_read_file config.cfg.defaults "${1}")";
    fi
    printf -- "%s" "${val}";
}

function description_get() # Gets a variable from the config.cfg.descriptions or defaults to not available in case var does not exist
{
    val="$(config_read_file config.cfg.descriptions "${1}")";
    if [ "${val}" = "__UNDEFINED__" ]; then
        val="Description not available.";
    fi
    printf -- "%s" "${val}";
}

function purge_moodle_versions() # Purges everything inside MOODLE_VERSIONS
{
    MOODLE_VERSIONS="$(config_get MOODLE_VERSIONS)"
    echo "Purging MOODLE_VERSIONS: $MOODLE_VERSIONS"
    if [ ! -d "$MOODLE_VERSIONS" ]
    then
        echo "Cannot find $MOODLE_VERSIONS directory, do you wish to create it now?"
        read -p "(Enter 'y' for yes, 'n' for no) : " confirmcreatedir
        if [[ $confirmcreatedir != 'y' ]]
        then
            echo "Aborting."
            exit 1 
        fi
        echo "Creating dir $MOODLE_VERSIONS ..."
        mkdir $MOODLE_VERSIONS
        interactive_check
    else
        echo "Do you really wish to completely purge $MOODLE_VERSIONS directory now?"
        read -p "(Enter 'y' for yes, 'n' for no) : " confirmremovedir
        if [[ $confirmremovedir != 'y' ]]
        then
            echo "Aborting."
            exit 1 
        fi
        echo "Removing dir $MOODLE_VERSIONS ..."
        rm -r $MOODLE_VERSIONS
        interactive_check
        echo "Creating dir $MOODLE_VERSIONS ..."
        mkdir $MOODLE_VERSIONS
        interactive_check
    fi
    echo "purge_moodle_versions: Done."
    interactive_check
}

function get_moodle() # Get's Core Moodle by version and release(optional) using the -v and -r tags
{
    VERSION=$VERSION
    RELEASE=$RELEASE
    MOODLE_VERSIONS="$(config_get MOODLE_VERSIONS)"
    if [ ! -d "$MOODLE_VERSIONS" ]
    then
        echo "Cannot find $MOODLE_VERSIONS directory, do you wish to create it now?"
        read -p "(Enter 'y' for yes, 'n' for no) : " confirmcreatedir
        if [[ $confirmcreatedir != 'y' ]]
        then
            echo "Aborting "
            exit 1 
        fi
        echo "Creating dir $MOODLE_VERSIONS ..."
        mkdir $MOODLE_VERSIONS
        interactive_check
    fi  
    echo "Moodle version -> $VERSION"
    echo "Moodle release -> $RELEASE"
    interactive_check
    STABLE="stable$VERSION"
    FILE="moodle-latest-$VERSION.tgz"
    FOLDERNAME="moodle-$VERSION"
    if [ "$RELEASE" != "" ]
    then
        FOLDERNAME="moodle-$VERSION-$RELEASE"
        FILE="moodle-$RELEASE.tgz"
        if [ -d "$MOODLE_VERSIONS/$FOLDERNAME" ]; then
            echo 'Release already available in moodle versions folder, skipping download...'
            interactive_check
            PREVENTDOWNLOAD="1"
        fi
    else
        if [ -f "$MOODLE_VERSIONS/$FILE" ]
        then
            echo "Files already found, removing previous download from MOODLE_VERSIONS..."
            rm "$MOODLE_VERSIONS/$FILE"
            rm -R "$MOODLE_VERSIONS/$FOLDERNAME"
            interactive_check
        fi
    fi
    echo "Downloading moodle from download.moodle.org..."
    if [ -z ${PREVENTDOWNLOAD+x} ] && wget "https://download.moodle.org/download.php/direct/$STABLE/$FILE"
    then
        interactive_check
        if [ -d "$FOLDERNAME" ]; then
            echo "Folder with same name found, removing..."
            rm -r "$MOODLE_VERSIONS/$FOLDERNAME"
            interactive_check
        fi
        echo "Uncompressing files..."
        if tar -xzf $FILE
        then
            interactive_check
            echo "Moving files to MOODLE_VERSIONS..."
            mv $FILE "$MOODLE_VERSIONS/$FILE"
            mv "moodle" "$MOODLE_VERSIONS/$FOLDERNAME"
            interactive_check
            echo "Fixing permissions of unzipped folder..."
            find "$MOODLE_VERSIONS/$FOLDERNAME/." -type f -exec chmod 0644 {} \;
            find "$MOODLE_VERSIONS/$FOLDERNAME/." -type d -exec chmod 0755 {} \;
            interactive_check
            echo "Creating 'latest' directory from '$FOLDERNAME'"
            if [ -d "$MOODLE_VERSIONS/latest" ]
            then
                echo "Removing current LATEST folder and contents..."
                rm -r "$MOODLE_VERSIONS/latest"
                interactive_check
            fi
            echo "Copying folder to LATEST folder..."
            cp -r "$MOODLE_VERSIONS/$FOLDERNAME" "$MOODLE_VERSIONS/latest"
            interactive_check
        else
            echo "Removing temporary files..."
            rm $FILE
            rm -R "moodle"
            interactive_check
        fi
    fi
    echo "get_moodle: Done."
    interactive_check
}

function prepare_upgrade() # Prepares Moodle upgrade by moving the folder and renaming it. It keeps config.php
{
    echo "======="
    echo "Renaming old folder and recreating"
    echo "======="

    NOW=$(date +"%Y-%m-%d_%H-%M-%S")

    $SUDO mv "$(config_get MOODLE_HTDOCS)" "$(config_get MOODLE_HTDOCS)_$NOW"
    $SUDO mkdir "$(config_get MOODLE_HTDOCS)"
    read -p "Change owndership? (Enter 'y' for yes, 'n' for no) : " confirmownership
    if [[ $confirmownership == 'y' ]]
    then
        $SUDO chown -R "$(config_get USER)":"$(config_get WWW_USER)" "$(config_get MOODLE_HTDOCS)"
    fi
    
    interactive_check
    
    echo "======"
    echo "Copying back config.php file"
    echo "======"

    cp "$(config_get MOODLE_HTDOCS)_$NOW/config.php" "$(config_get MOODLE_HTDOCS)"/config.php
    interactive_check
}

function enable_maintenance() # Turns Moodle maintenance mode ON
{
    echo '=========='
    echo "Switching on Maintenance mode"
    echo '=========='
    $SUDO -u "$(config_get WWW_USER)" php "$(config_get MOODLE_HTDOCS)"/admin/cli/maintenance.php --enable

    read -p "Change ownership? (Enter 'y' for yes, 'n' for no) : " confirmownership
    if [[ $confirmownership == 'y' ]]
    then
        $SUDO chown -R "$(config_get USER)":"$(config_get WWW_USER)" "$(config_get MOODLE_HTDOCS)"
    fi
    interactive_check  
}

function disable_maintenance() # Turns Moodle maintenance mode OFF
{
    echo '=========='
    echo "Switching off Maintenance mode"
    echo '=========='
    php "$(config_get MOODLE_HTDOCS)"/admin/cli/maintenance.php --disable
    interactive_check
}

function sync_plugins() # Syncs the MIGRATION_DIR htdocs and moodledata folders to the MOODLE_HTDOCS and MOODLE_DATA
{
    echo '=========='
    echo "Running sync_plugins()"
    echo '=========='

    echo "Note: This will update www and moodledata/lang.  If you need to update all moodledata, change the file."
    interactive_check
    echo "Looking for new Moodle files..."

    MIGRATION_DIR="$(config_get MIGRATION_DIR)"
    if [ -d "$MIGRATION_DIR" ]; then
        echo "$MIGRATION_DIR exists."
        interactive_check
    else
        echo "Migration directory does not exist or could not be found, you should not continue!"
        echo "Check the 'config.cfg' file make sure 'MIGRATION_DIR' is set correclty."
        read -p "Press [Enter] to continue at your own risk, or [ctl + c] to abort."
    fi

    echo '=========='
    echo "Changing target ownership."
    echo '=========='

    read -p "Change ownership? (Enter 'y' for yes, 'n' for no) : " confirmownership
    if [[ $confirmownership == 'y' ]]
    then
        $SUDO chown -R "$(config_get USER)":"$(config_get WWW_USER)" "$(config_get MOODLE_HTDOCS)"
    fi
    
    interactive_check

    echo '=========='
    echo "Syncronising moodle_migration"
    echo '=========='

    rsync -avz "$MIGRATION_DIR"/htdocs/ "$(config_get MOODLE_HTDOCS)"/
    rsync -avz "$MIGRATION_DIR"/moodledata/lang/ "$(config_get MOODLE_DATA)"/lang/
    interactive_check

    echo "=========="
    echo "Running patches"
    echo "=========="
    "$MIGRATION_DIR"/patches/patches.sh
    interactive_check

    echo '=========='
    echo "Changing back ownership"
    echo '=========='

    read -p "Change ownership? (Enter 'y' for yes, 'n' for no) : " confirmownership
    if [[ $confirmownership == 'y' ]]
    then
        $SUDO chown -R "$(config_get USER)":"$(config_get WWW_USER)" "$(config_get MOODLE_HTDOCS)"
    fi
    
    interactive_check
}

function sync_release() # Rsyncs the MOODLE_VERSIONS/MOODLE_LATEST folder to MOODLE_HTDOCS
{
    echo '=========='
    echo "Syncronising the lastest Moodle release"
    echo '=========='
    rsync -avz "$(config_get MOODLE_VERSIONS)"/"$(config_get MOODLE_LATEST)"/ "$(config_get MOODLE_HTDOCS)"/
    interactive_check
}

function fix_moodle_perms() # Fixes moodle permissions of MOODLE_HTDOCS
{
    echo '=========='
    echo "Running fix_moodle_perms()"
    echo '=========='

    read -p "Change ownership? (Enter 'y' for yes, 'n' for no) : " confirmownership
    if [[ $confirmownership == 'y' ]]
    then
        $SUDO chown -R "$(config_get USER)":"$(config_get WWW_USER)" "$(config_get MOODLE_HTDOCS)"
    fi
    
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -exec chmod 0644 {} \;
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type d -exec chmod 0755 {} \;

    # These are files that need to remain executable.
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -name "mimetex.darwin" -exec chmod 0755 {} \;
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -name "mimetex.exe" -exec chmod 0755 {} \;
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -name "mimetex.linux" -exec chmod 0755 {} \;
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -name "mimetex.freebsd" -exec chmod 0755 {} \;
    $SUDO find "$(config_get MOODLE_HTDOCS)"/. -type f -name "algebra2tex.pl" -exec chmod 0755 {} \;
    interactive_check
}

function moodle_upgrade() # Triggers the upgrade.php Moodle script'
{
    echo '=========='
    echo "Running Moodle upgrade"
    echo '=========='
    
    $SUDO php "$(config_get MOODLE_HTDOCS)"/admin/cli/upgrade.php
    interactive_check
}

function make_moodle_config() # Creates a config.php using the variables and moves it to the target htdocs directory
{
    MOODLE_CFG_DB_TYPE="$(config_get MOODLE_CFG_DB_TYPE)"
    MOODLE_CFG_DB_HOST="$(config_get MOODLE_CFG_DB_HOST)"
    MOODLE_CFG_DB_NAME="$(config_get MOODLE_CFG_DB_NAME)"
    MOODLE_CFG_DB_USER="$(config_get MOODLE_CFG_DB_USER)"
    MOODLE_CFG_DB_PASS="$(config_get MOODLE_CFG_DB_PASS)"
    MOODLE_CFG_DB_PREF="$(config_get MOODLE_CFG_DB_PREF)"
    MOODLE_CFG_WWWROOT="$(config_get MOODLE_CFG_WWWROOT)"
    MOODLE_CFG_DATAROOT="$(config_get MOODLE_CFG_DATAROOT)"
    echo "Creating Moodle 'config.php'..."
    $SUDO php ./make_moodle_config.php $MOODLE_CFG_DB_TYPE $MOODLE_CFG_DB_HOST $MOODLE_CFG_DB_NAME $MOODLE_CFG_DB_USER $MOODLE_CFG_DB_PASS $MOODLE_CFG_DB_PREF $MOODLE_CFG_WWWROOT $MOODLE_CFG_DATAROOT 
    interactive_check
    if [ -f "./config.php" ]
    then
        echo "File successfully created, moving 'config.php' to Moodle directory..."
        mv "./config.php" "$(config_get MOODLE_HTDOCS)/config.php"
        interactive_check
    fi
}

function moodle_install() # Triggers the install_database.php Moodle script using the variables stored
{
    echo "Automatically installing Moodle..."
    MOODLE_CFG_DB_TYPE="$(config_get MOODLE_CFG_DB_TYPE)"
    MOODLE_CFG_DB_HOST="$(config_get MOODLE_CFG_DB_HOST)"
    MOODLE_CFG_DB_NAME="$(config_get MOODLE_CFG_DB_NAME)"
    MOODLE_CFG_DB_USER="$(config_get MOODLE_CFG_DB_USER)"
    MOODLE_CFG_DB_PASS="$(config_get MOODLE_CFG_DB_PASS)"
    MOODLE_CFG_DB_PREF="$(config_get MOODLE_CFG_DB_PREF)"
    MOODLE_CFG_WWWROOT="$(config_get MOODLE_CFG_WWWROOT)"
    MOODLE_CFG_DATAROOT="$(config_get MOODLE_CFG_DATAROOT)"
    MOODLE_CFG_SITENAME="$(config_get MOODLE_CFG_SITENAME)"
    MOODLE_CFG_SHORTNAME="$(config_get MOODLE_CFG_SHORTNAME)"
    MOODLE_CFG_ADMINPASSWORD="$(config_get MOODLE_CFG_ADMINPASSWORD)"
    MOODLE_CFG_ADMINEMAIL="$(config_get MOODLE_CFG_ADMINEMAIL)"
    php $(config_get MOODLE_HTDOCS)/admin/cli/install_database.php --agree-license --fullname=$MOODLE_CFG_SITENAME --shortname=$MOODLE_CFG_SHORTNAME --wwwroot=$MOODLE_CFG_WWWROOT --dataroot=$MOODLE_CFG_DATAROOT --dbtype=$MOODLE_CFG_DB_TYPE --dbhost=$MOODLE_CFG_DB_HOST --dbname=$MOODLE_CFG_DB_NAME --dbuser=$MOODLE_CFG_DB_USER --dbpass=$MOODLE_CFG_DB_PASS --prefix=$MOODLE_CFG_DB_PREF --adminuser=admin --adminpass=$MOODLE_CFG_ADMINPASSWORD --adminemail=$MOODLE_CFG_ADMINEMAIL
    interactive_check
    # DEFAULTS we could use
    # --wwwroot=$MOODLE_CFG_WWWROOT
    # --dataroot=$MOODLE_CFG_DATAROOT
    # --dbtype=$MOODLE_CFG_DB_TYPE
    # --dbhost=$MOODLE_CFG_DB_HOST
    # --dbname=$MOODLE_CFG_DB_NAME
    # --dbuser=$MOODLE_CFG_DB_USER
    # --dbpass=$MOODLE_CFG_DB_PASS
    # --dbport=NUMBER
    # --dbsocket=PATH
    # --prefix=$MOODLE_CFG_DB_PREF
    # --fullname=STRING
    # --shortname=STRING
    # --summary=STRING
    # --adminuser="admin"
    # --adminpass=$MOODLE_CFG_ADMINPASSWORD
    # --adminemail=$MOODLE_CFG_ADMINEMAIL
}

function configure() # Creates a new, or updates the existing config.cfg file
{
    echo "Bash version: $BASH_VERSION "
    if (( BASH_VERSINFO < 4 ))
    then
        echo 'This method is only supported by bash version 4 or higher, aborting.'
        exit 1
    fi
    if [ ! -f "./config.cfg" ]
    then
        echo 'No config.cfg file found, do you want to create a new one?'
        read -p "(Enter 'y' for yes, 'n' for no) : " confirmcreatefile
        if [[ $confirmcreatefile != 'y' ]]
        then
            echo "Aborting."
            exit 1 
        fi
        cp "./config.cfg.defaults config.cfg"
    fi
    echo 'Starting configuration process...'
    declare -A current_configuration
    current_configuration=( 
        ["MOODLE_HTDOCS"]="$(config_get MOODLE_HTDOCS)" 
        ["MOODLE_DATA"]="$(config_get MOODLE_DATA)"
        ["MOODLE_VERSIONS"]="$(config_get MOODLE_VERSIONS)"
        ["MOODLE_LATEST"]="$(config_get MOODLE_LATEST)"
        ["USER"]="$(config_get USER)"
        ["WWW_USER"]="$(config_get WWW_USER)"
        ["MIGRATION_DIR"]="$(config_get MIGRATION_DIR)"
        ["MOODLE_CFG_DB_TYPE"]="$(config_get MOODLE_CFG_DB_TYPE)"
        ["MOODLE_CFG_DB_HOST"]="$(config_get MOODLE_CFG_DB_HOST)"
        ["MOODLE_CFG_DB_NAME"]="$(config_get MOODLE_CFG_DB_NAME)"
        ["MOODLE_CFG_DB_USER"]="$(config_get MOODLE_CFG_DB_USER)"
        ["MOODLE_CFG_DB_PASS"]="$(config_get MOODLE_CFG_DB_PASS)"
        ["MOODLE_CFG_DB_PREF"]="$(config_get MOODLE_CFG_DB_PREF)"
        ["MOODLE_CFG_WWWROOT"]="$(config_get MOODLE_CFG_WWWROOT)"
        ["MOODLE_CFG_DATAROOT"]="$(config_get MOODLE_CFG_DATAROOT)"
        ["MOODLE_CFG_SITENAME"]="$(config_get MOODLE_CFG_SITENAME)"
        ["MOODLE_CFG_SHORTNAME"]="$(config_get MOODLE_CFG_SHORTNAME)"
        ["MOODLE_CFG_ADMINPASSWORD"]="$(config_get MOODLE_CFG_ADMINPASSWORD)"
        ["MOODLE_CFG_ADMINEMAIL"]="$(config_get MOODLE_CFG_ADMINEMAIL)"
        )
    CONFIG_FILE_CONTENTS=""
    for KEY in "${!current_configuration[@]}"; do
        echo '----------------------------------------'
        # Print the KEY value
        echo "Name:         $KEY"
        echo "Value:        ${current_configuration[$KEY]}"
        echo "Description:  $(description_get $KEY)"
        # Print the VALUE attached to that KEY
        echo "Do you wish to update $KEY?"
        read -p "(Enter 'y' to update value, 'Enter' to keep the current value) : " confirmcreatefile
        if [[ $confirmcreatefile == 'y' ]]
        then
            read -p "New value: " newvalue
            current_configuration[$KEY]=$newvalue
            echo "Value set: ${current_configuration[$KEY]}"
        else
            current_configuration[$KEY]=${current_configuration[$KEY]}
        fi
        CONFIG_FILE_CONTENTS="${CONFIG_FILE_CONTENTS}$KEY=${current_configuration[$KEY]}""%s\n"
    done
    echo 'Removing config.cfg...'
    rm config.cfg
    interactive_check
    echo 'Creating new config.cfg...'
    printf $CONFIG_FILE_CONTENTS > config.cfg
    echo 'Done configure()'
    interactive_check
}

function setup_upgroodle() # Installs additional commands to be used
{
    echo "Running upgroodle setup..."
    SUDO=(`command -v sudo`)
    if $SUDO &> /dev/null
    then
        echo "Upgroodle may require 'sudo' to be installed, do you want to install it now?"
        read -p "(Enter 'y' for yes, 'n' for no) : " confirminstallsudo
        if [[ $confirminstallsudo == 'y' ]]
        then
            apt install sudo
        fi
        
    fi
    echo "Running upgroodle setup, this will first run 'sudo apt update'."
    read -p "Press Enter to continue "
    $SUDO apt update
    required_pkgs=(
        "grep"
        "head"
        "rsync" 
        "wget" 
        "zip" 
        "sed"
        )
    for pkg in "${required_pkgs[@]}"; do
        echo "Checking for '$pkg'"
        COMMAND=(`command -v $pkg`)
        if [ "$COMMAND" = "" ]
        then
            echo "Could not find '$pkg' by running command."
            echo "Upgroodle requires '$pkg' to be installed, do you want to install it now?"
            read -p "(Enter 'y' for yes, 'n' for no) : " confirminstallsudo
            if [[ $confirminstallsudo != 'y' ]]
            then
                echo -e "$CL_RED""WARNING:$CL_RESET Upgroodle requires '$pkg' to be installed in order to work as expected."
                read -p "Press [Enter] to continue at your own risk, or [ctl + c] to abort."
            else
                echo "Installing '$pkg' now"
                $SUDO apt install $pkg
            fi
        else
            echo "The package '$pkg' is already installed, skipping..."
        fi
    done
    PWD=(`pwd`)
    ALIASPATH="$PWD/upgroodle.sh"
    echo "Setup complete."
    echo "If you wish to create an alias run:"
    echo ""
    echo "  $ alias upgroodle='$ALIASPATH'"
    echo ""
}

function show_functions() # Show a list of functions
{
    echo "Showing available functions:"
    these_functions=`grep -o " [a-z].*(_*) # .*" "config.shlib"`
    ## inserting colours
    functions_help=`echo -e "$these_functions" | sed 's/\(#\)/\n\1/g' | sed 's/\(#\)/ \\\e[0m \1/g' | sed 's/^/\\\033[0;36m/'`

    echo -e "$functions_help"
    exit 1
}